/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mixregui;

import def_lib.DefinitionHelper;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author adityaponnada
 */
public class advancedOptions extends javax.swing.JFrame {
    
    DefinitionHelper defFile3;

    /**
     * Creates new form advancedOptions
     */
    public advancedOptions() {
        initComponents();
        
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        missingValueCode.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        meanSubmodelCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        BSVarianceCheckBox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        WSVarianceCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        adaptiveQuadritureCheckBox = new javax.swing.JCheckBox();
        convergenceCriteria = new javax.swing.JSpinner();
        quadriturePoints = new javax.swing.JSpinner();
        jLabel15 = new javax.swing.JLabel();
        centerRegressorsCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        missingValuesCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        missingValueCode = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        standardizedCoeff = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        maximumIterations = new javax.swing.JSpinner();
        ridgeSpinner = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        outputTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        defTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advanced Options ...");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Mean Submodel:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 7, -1, -1));

        meanSubmodelCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanSubmodelCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(meanSubmodelCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 7, -1, -1));

        jLabel2.setText("BS Variance:  ");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 36, -1, -1));

        BSVarianceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSVarianceCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(BSVarianceCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 36, -1, -1));

        jLabel3.setText("WS Variance:  ");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 65, -1, -1));

        WSVarianceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSVarianceCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(WSVarianceCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 65, -1, -1));

        jLabel4.setText("Convergence Criteria:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 94, -1, -1));

        jLabel5.setText("Quadriture Points:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 128, -1, -1));

        jLabel6.setText("Adaptive Quadriture:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 162, -1, -1));

        adaptiveQuadritureCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaptiveQuadritureCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(adaptiveQuadritureCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 160, -1, -1));

        convergenceCriteria.setModel(new javax.swing.SpinnerNumberModel(0.001d, 0.0d, 1.0d, 0.001d));
        jPanel1.add(convergenceCriteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 94, 69, -1));

        quadriturePoints.setModel(new javax.swing.SpinnerNumberModel(11, 1, 255, 1));
        jPanel1.add(quadriturePoints, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 128, 69, -1));

        jLabel15.setText("Center All Regressors?");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 195, -1, -1));

        centerRegressorsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centerRegressorsCheckBoxActionPerformed(evt);
            }
        });
        jPanel1.add(centerRegressorsCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 195, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 21, 260, 240));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel7.setText("Maximum Iterations:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 12, -1, -1));

        jLabel8.setText("Missing values:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 47, -1, -1));

        missingValuesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                missingValuesCheckBoxActionPerformed(evt);
            }
        });
        jPanel2.add(missingValuesCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 47, -1, -1));

        jLabel9.setText("Missing Value Code:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 87, -1, -1));

        missingValueCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                missingValueCodeActionPerformed(evt);
            }
        });
        jPanel2.add(missingValueCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(155, 82, 96, -1));

        jLabel10.setText("Standardized Coefficients:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 133, -1, -1));

        standardizedCoeff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standardizedCoeffActionPerformed(evt);
            }
        });
        jPanel2.add(standardizedCoeff, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 126, -1, -1));

        jLabel11.setText("Ridge:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 172, -1, -1));

        maximumIterations.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        jPanel2.add(maximumIterations, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 7, 69, -1));

        ridgeSpinner.setModel(new javax.swing.SpinnerNumberModel(0.15d, 0.0d, 1.0d, 0.01d));
        jPanel2.add(ridgeSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 68, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 21, 260, 240));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setText("Input Data File Name:");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 17, -1, -1));

        inputTextField.setText("Test.dat");
        inputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputTextFieldActionPerformed(evt);
            }
        });
        jPanel3.add(inputTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 12, 79, -1));

        jLabel13.setText("Output File Name:");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(275, 17, -1, -1));

        outputTextField.setText("Test.out");
        outputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputTextFieldActionPerformed(evt);
            }
        });
        jPanel3.add(outputTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(407, 12, 79, -1));

        jLabel14.setText("Definition File Name:");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 61, -1, -1));

        defTextField.setText("Test.def");
        defTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defTextFieldActionPerformed(evt);
            }
        });
        jPanel3.add(defTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 56, 79, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 530, 100));

        jButton1.setText("Submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 390, -1, -1));

        jButton2.setText("Reset");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 390, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void meanSubmodelCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanSubmodelCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_meanSubmodelCheckBoxActionPerformed

    private void BSVarianceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSVarianceCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BSVarianceCheckBoxActionPerformed

    private void WSVarianceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSVarianceCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_WSVarianceCheckBoxActionPerformed

    private void adaptiveQuadritureCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaptiveQuadritureCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adaptiveQuadritureCheckBoxActionPerformed

    private void missingValuesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_missingValuesCheckBoxActionPerformed
        // TODO add your handling code here:
        
        if (missingValuesCheckBox.isSelected() == true){
            missingValueCode.setEnabled(true);
            missingValueCode.setText("-9999");
        } else {
            missingValueCode.setEnabled(false);
        }
        
    }//GEN-LAST:event_missingValuesCheckBoxActionPerformed

    private void missingValueCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_missingValueCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_missingValueCodeActionPerformed

    private void standardizedCoeffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standardizedCoeffActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standardizedCoeffActionPerformed

    private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputTextFieldActionPerformed

    private void outputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputTextFieldActionPerformed

    private void defTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_defTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       //defFile3 = NewModel.defFile;
       int tryCount = 0;
       int catchCount = 0;
       
       //defFile
        
        try {
            NewModel.defFile.setAdvancedConvergence(String.valueOf(convergenceCriteria.getValue()));
            System.out.println("Convergence: " + NewModel.defFile.getAdvancedConvergence());
            tryCount = 1;
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            catchCount = 1;
        }
        
        //set quadriture points
        try {
            NewModel.defFile.setAdvancedQuadPoints(String.valueOf(quadriturePoints.getValue()));
            System.out.println("Quadriture Points: " + NewModel.defFile.getAdvancedQuadPoints());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            NewModel.defFile.setAdvancedMaxIteration(String.valueOf(getMaximumIterations()));
            System.out.println("Maximum Iteraions: " + NewModel.defFile.getAdvancedMaxIteration());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
       if (missingValueCode.isEnabled()){
       
           try {
            NewModel.defFile.setAdvancedMissingValue(getMissingValueCode());
            System.out.println("Missing Value: " + NewModel.defFile.getAdvancedMissingValue());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
       
       } else {
           // do nothing and go next
       
       }
       
        try {
            NewModel.defFile.setModelFixedInt(String.valueOf(isMeanSubModelChecked()));
            System.out.println("Mean SubModel Checked?: " + NewModel.defFile.getModelFixedInt());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            NewModel.defFile.setModelRandomInt(String.valueOf(isBSVarianceChecked()));
            System.out.println("BS SubModel Checked?: " + NewModel.defFile.getModelRandomInt());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            NewModel.defFile.setModelScaleInt(String.valueOf(isWSVarianceChecked()));
            System.out.println("WS SubModel Checked?: " + NewModel.defFile.getModelScaleInt());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            NewModel.defFile.setAdvancedAdaptiveQuad(String.valueOf(isAdaptiveQuadritureChecked()));
            System.out.println("Adaptive Quadriture Checked?: " + NewModel.defFile.getModelScaleInt());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        NewModel.defFile.setOutputPrefix("Output_" + getOutPutFileName());
        System.out.println("Output file name: " + NewModel.defFile.getOutputPrefix());
        
        
        
        try {
            NewModel.defFile.setAdvancedRidge(String.valueOf(getRidge()));
            System.out.println("Ridge: " + NewModel.defFile.getAdvancedRidge());
            tryCount = 1;
        } catch (Exception ex) {
            catchCount = 1;
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        try {
            NewModel.defFile.setAdvancedCenterScale(String.valueOf(isCenterRegressorChecked()));
            System.out.println("Scale Regressor: " + NewModel.defFile.getAdvancedRidge());
            tryCount = 1;
        } catch (Exception ex) {
            Logger.getLogger(advancedOptions.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Caution!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
        if (catchCount == 0){
            //do nothing
            this.dispose();
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void centerRegressorsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centerRegressorsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_centerRegressorsCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(advancedOptions.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new advancedOptions().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BSVarianceCheckBox;
    private javax.swing.JCheckBox WSVarianceCheckBox;
    private javax.swing.JCheckBox adaptiveQuadritureCheckBox;
    private javax.swing.JCheckBox centerRegressorsCheckBox;
    private javax.swing.JSpinner convergenceCriteria;
    private javax.swing.JTextField defTextField;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSpinner maximumIterations;
    private javax.swing.JCheckBox meanSubmodelCheckBox;
    private javax.swing.JTextField missingValueCode;
    private javax.swing.JCheckBox missingValuesCheckBox;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JSpinner quadriturePoints;
    private javax.swing.JSpinner ridgeSpinner;
    private javax.swing.JCheckBox standardizedCoeff;
    // End of variables declaration//GEN-END:variables


//check if mean sub model is checked in advanced options    
public int isMeanSubModelChecked(){

    int checked = 0;
    
    if (meanSubmodelCheckBox.isSelected() == true){
        checked = 1;
    }
    else {
        checked = 0;
    }
    
    return checked;
}



// check if BS variance is checked
public int isBSVarianceChecked(){

    int checked = 0;
    
    if (BSVarianceCheckBox.isSelected() == true){
        checked = 1;
    }
    else {
        checked = 0;
    }
    
    return checked;
}

// check if BS variance is checked
public int isWSVarianceChecked(){

    int checked = 0;
    
    if (WSVarianceCheckBox.isSelected() == true){
        checked = 1;
    }
    else {
        checked = 0;
    }
    
    return checked;
}

// get the convergence criteria
public Double getConvergenceCriteria(){

    return (Double) convergenceCriteria.getValue();

}

// get Quadriture points
public Double getQuadriturePoints(){

    return (Double) quadriturePoints.getValue();
}


// check if adaptive quadriture is checked
public int isAdaptiveQuadritureChecked(){
    int checked = 0;
    
    if (adaptiveQuadritureCheckBox.isSelected() == true){
        checked = 0;
    }
    else {
    
        checked = 1;
    }
    
    return checked;  
}

// get the convergence criteria
public Integer getMaximumIterations(){

    return (Integer) maximumIterations.getValue();

}

//check if the data set has missing values
public boolean isMissingValuesChecked(){
    boolean checked = false;
    
    if (missingValuesCheckBox.isSelected() == true){
        checked = true;
    }
    else {
    
        checked = false;
    }
    
    return checked;  
}

// get missing value code
public String getMissingValueCode(){
    String missingValue;
    
    //missingValue = (double) missingValueCode.getText().toString();
    
    missingValue = missingValueCode.getText().toString();
    
    return missingValue;
}

//check if standardized coefficients is checked
public int isStandardizedCoefChecked(){
    int checked = 0;
    
    if (standardizedCoeff.isSelected() == true){
        checked = 1;
    }
    else {
    
        checked = 0;
    }
    
    return checked;  
}

// get the ridge value
public Double getRidge(){

    return (Double) ridgeSpinner.getValue();

}

public int isCenterRegressorChecked(){
    int value = 0;
    
    if (centerRegressorsCheckBox.isSelected()){
        value = 1;
    } else {
        value = 0;
    }
    
    return value;
}

public String getOutPutFileName(){
    
    String outPut;
    
    outPut = outputTextField.getText().toString();

    return outPut;
}


}
